package visitors;

import ast.*;

public abstract class Visitor {
    public void visit(ASTNode node){}
    public void visit(AbstractMethodDecl node){}
    public void visit(AdditiveExpr node){}
    public void visit(AndExpr node){}
    public void visit(ArgumentList node){}
    public void visit(ArrayAccess node){}
    public void visit(ArrayCreationExpr node){}
    public void visit(ArrayType node){}
    public void visit(Assignment node){}
    public void visit(AssignmentExpr node){}
    public void visit(BlockStmts node){}
    public void visit(CastExpr node){}
    public void visit(ClassBodyDecls node){}
    public void visit(ClassInstanceCreateExpr node){}
    public void visit(ClassMemberDecl node){}
    public void visit(ClassOrInterfaceType node){}
    public void visit(ClassType node){}
    public void visit(ConditionalAndExpr node){}
    public void visit(ConditionalOrExpr node){}
    public void visit(ConstructorBody node){}
    public void visit(ConstructorDecl node){}
    public void visit(ConstructorDeclarator node){}
    public void visit(ConstructorList node){}
    public void visit(DimExpr node){}
    public void visit(Dims node){}
    public void visit(EmptyStmt node){}
    public void visit(EqualityExpr node){}
    public void visit(Expr node){}
    public void visit(ExprStmt node){}
    public void visit(ExtendsInterfaces node){}
    public void visit(FieldAccess node){}
    public void visit(ForInit node){}
    public void visit(ForStmt node){}
    public void visit(ForStmtNotIf node){}
    public void visit(ForUpdate node){}
    public void visit(IfThenElseStmt node){}
    public void visit(IfThenElseStmtNotIf node){}
    public void visit(IfThenStmt node){}
    public void visit(ImportDecl node){}
    public void visit(ImportDecls node){}
    public void visit(InterfaceBody node){}
    public void visit(InterfaceDecl node){}
    public void visit(InterfaceMemberDecl node){}
    public void visit(InterfaceMemberDecls node){}
    public void visit(Interfaces node){}
    public void visit(InterfaceType node){}
    public void visit(InterfaceTypeList node){}
    public void visit(LHS node){}
    public void visit(Literal node){}
    public void visit(LocalVarDecl node){}
    public void visit(LocalVarDeclStmt node){}
    public void visit(MethodBody node){}
    public void visit(MethodDeclarator node){}
    public void visit(MethodHeader node){}
    public void visit(MethodInvocation node){}
    public void visit(Modifier node){}
    public void visit(Modifiers node){}
    public void visit(MultiplicativeExpr node){}
    public void visit(Name node){}
    public void visit(NumericLiteral node){}
    public void visit(NumericType node){}
    public void visit(OrExpr node){}
    public void visit(PackageDecl node){}
    public void visit(Parameter node){}
    public void visit(ParameterList node){}
    public void visit(PostFixExpr node){}
    public void visit(Primary node){}
    public void visit(PrimaryNoArray node){}
    public void visit(PrimitiveType node){}
    public void visit(ReferenceType node){}
    public void visit(RelationExpr node){}
    public void visit(ReturnStmt node){}
    public void visit(SingleTypeImportDecl node){}
    public void visit(Stmt node){}
    public void visit(StmtExpr node){}
    public void visit(StmtExprList node){}
    public void visit(StmtNotIf node){}
    public void visit(StmtWithoutSubstmt node){}
    public void visit(Super node){}
    public void visit(Type node){}
    public void visit(TypeDecl node){}
    public void visit(TypeDecls node){}
    public void visit(TypeImportOndemandDecl node){}
    public void visit(UnaryExpr node){}
    public void visit(UnaryExprNotPlusMinus node){}
    public void visit(VarDeclarator node){}
    public void visit(VarDeclaratorID node){}
    public void visit(VarDeclarators node){}
    public void visit(WhileStmt node){}
    public void visit(WhileStmtNotIf node){}
    public void visit(CompilationUnit node){}
    public void visit(ClassDecl node){}
    public void visit(ClassBodyDecl node){}
    public void visit(MethodDecl node){}
    public void visit(FieldDecl node){}
    public void visit(Block node){}
    public void visit(BlockStmt node){}
    public void visit(CharLiteral node){}
    public void visit(NullLiteral node){}
    public void visit(StringLiteral node){}
    public void visit(ThisLiteral node){}

}
